use crate::ast::*;

grammar;



pub Prog: Prog = {
    <stmt: Stmt*> => Prog(stmt)
}

pub Stmt: Stmt = {
    <comment: Comment> => Stmt::Comment(comment),
    <func: FuncIdent> => Stmt::FuncIdent(func),
    <var: VarIdent> ";" => Stmt::VarIdent(var),
    <assign: VarAssign> ";" => Stmt::VarAssign(assign),
    "return" <expr: Expr> ";" => Stmt::ReturnValue(Box::new(expr)),
    "mod" <id: Ident> <body: Body> => Stmt::Module(Module::new(id, body)),
    "use" <import: PrimitiveExpr> ";" => Stmt::Import(Import::new(Box::new(import))),
    <expr: Expr> ";" => Stmt::Expr(Box::new(expr)),
};

Comment: String = {
    <c: r"//[^\n]*\n"> => c.to_string(),
    //<c:"/\\*([^*]|\\*+[^*/])*\\*+/"> => c.to_string(),
}

VarAssign: VarAssign = {
    <ident: Ident> "=" <expr: Expr> => VarAssign::new(ident, expr),
}

FuncIdent: FuncIdent = {
    "pub" "func" <id: Ident> "=" "(" <args: Comma<Arg>> ")" <body: Body>
        => FuncIdent::new_wo_rty(PrivacyType::Public, &id, args, Some(body)),
    "pub" "func" <id: Ident> "=" "(" <args: Comma<Arg>> ")" "->" <rtype: Type> <body: Body>
        => FuncIdent::new_w_rty(PrivacyType::Public, &id, args, rtype, Some(body)),
    "func" <id: Ident> "=" "(" <args: Comma<Arg>> ")" <body: Body>
        => FuncIdent::new_wo_rty(PrivacyType::Private, &id, args, Some(body)),
    "func" <id: Ident> "=" "(" <args: Comma<Arg>> ")" "->" <rtype: Type> <body: Body>
        => FuncIdent::new_w_rty(PrivacyType::Private, &id, args, rtype, Some(body)),
};

AnonymousFunc: AnonymousFunc = {
    "$|" <args: Comma<AnonymousFuncArg>> "|" <body: Body>
            => AnonymousFunc::new_wo_rty(args, Some(body)),
    "$|" <args: Comma<AnonymousFuncArg>> "|" "->" <rtype: Type> <body: Body>
            => AnonymousFunc::new_w_rty(args, rtype, Some(body)),
}

AnonymousFuncArg: (String, Expr) = {
    <id: Ident> ":" <expr: Expr> => (id, expr)
}

Arg: (String, String) = {
    <id: Ident> ":" <ty: Type> => (id, ty)
};

Body: Body = {
    "{" <stmt: Stmt*> "}" => Body::new(stmt),
};

VarIdent: VarIdent = {
    "let" <id: Ident> "=" <expr: Expr> => VarIdent::new(&id, expr),
};

pub Expr: Expr = {
    <l: LogicalExpr> => l,
};

LogicalExpr: Expr = {
    <l: BitExpr> "||" <r: LogicalExpr> => Expr::Or(Box::new(l), Box::new(r)),
    <l: BitExpr> "&&" <r: LogicalExpr> => Expr::And(Box::new(l), Box::new(r)),
    BitExpr
}

BitExpr: Expr = {
    <l: ExprCond> "^" <r: BitExpr> => Expr::Xor(Box::new(l), Box::new(r)),
    ExprCond
}

ExprCond: Expr = {
    <l: ExprAddSub> "==" <r: ExprCond> => Expr::Eq(Box::new(l), Box::new(r)),
    <l: ExprAddSub> "!=" <r: ExprCond> => Expr::NotEq(Box::new(l), Box::new(r)),
    <l: ExprAddSub> ">" <r: ExprCond> => Expr::Gt(Box::new(l), Box::new(r)),
    <l: ExprAddSub> "<" <r: ExprCond> => Expr::Lt(Box::new(l), Box::new(r)),
    <l: ExprAddSub> ">=" <r: ExprCond> => Expr::Ge(Box::new(l), Box::new(r)),
    <l: ExprAddSub> "<=" <r: ExprCond> => Expr::Le(Box::new(l), Box::new(r)),
    ExprAddSub
}

ExprAddSub: Expr = {
    <l: ExprMulDiv> "+" <r: ExprAddSub> => Expr::Add(Box::new(l), Box::new(r)),
    <l: ExprMulDiv> "-" <r: ExprAddSub> => Expr::Sub(Box::new(l), Box::new(r)),
    ExprMulDiv,
};

ExprMulDiv: Expr = {
    <l: UnaryExpr> "*" <r: ExprMulDiv> => Expr::Mul(Box::new(l), Box::new(r)),
    <l: UnaryExpr> "/" <r: ExprMulDiv> => Expr::Div(Box::new(l), Box::new(r)),
    <l: UnaryExpr> "%" <r: ExprMulDiv> => Expr::Mod(Box::new(l), Box::new(r)),
    UnaryExpr,
};

UnaryExpr: Expr = {
    "!" <expr: PrimitiveExpr> => Expr::Not(Box::new(expr)),
    "-" <expr: PrimitiveExpr> => Expr::Neg(Box::new(expr)),
    PrimitiveExpr
}

PrimitiveExpr: Expr = {
    <id: Ident> => Expr::Ident(id),
    <int: Integer> => Expr::Integer(int),
    <float: Float> => Expr::Float(float),
    <bool: Bool> => Expr::Bool(bool),
    <string: StringLit> => Expr::StringLit(string),
    <call: CallExpr> => Expr::Call(call),
    <array: Array> => Expr::Array(array),
    <dict: Dictionary> => Expr::Dictionary(dict),
    <func: FuncPtr> => Expr::Func(func),
    <counter: Counter> => Expr::Counter(counter),
    <range: Range> => Expr::Range(range),
    <anon_func: AnonymousFunc> => Expr::AnonFunc(anon_func),
    "&" <r: PrimitiveExpr> => Expr::Ref(Box::new(r)),
    InlineAccessExpr,
    "(" <e: Expr> ")" => e,
}

InlineAccessExpr: Expr = {
    <id: Ident> "::" <expr: PrimitiveExpr> => Expr::InlineAccess(InlineAccess::new(id, Some(Box::new(expr)))),
}

Range: (i64, i64) = {
    <start: Integer> ".." <end: Integer> => (start, end)
}

Counter: (String, (i64, i64)) = {
   <id: Ident> "in" <range: Range> => (id, range)
}

FuncPtr: FuncPtr = {
    "$" <id: Ident> "|" <args: Comma<Expr>> "|" => FuncPtr::new(&id, Some(args))
}

CallExpr: CallExpr = {
    <id: Ident> "(" <args: Comma<Expr>> ")" => CallExpr::new(id, args),
};

// Типы возвращаемых значений и переменных
pub Type: String = {
    "void" => "void".to_string(),
    "int" => "int".to_string(),
    "string" => "string".to_string(),
    "float" => "float".to_string(),
    <ty: Ident> => ty
};

// Идентификатор
pub Ident: String = {
    <id:r"[a-zA-Z_][a-zA-Z0-9_]*"> => id.to_string(),
};

// Целые числа
pub Integer: i64 = {
    <int:r"[0-9]+"> => int.parse().unwrap(),
};

// Числа с плавающей точкой
pub Float: f64 = {
    <float:r"[0-9]+\.[0-9]+"> => float.parse().unwrap(),
};

// Булевы значения
pub Bool: bool = {
    "true" => true,
    "false" => false,
};

// Строковые литералы
pub StringLit: String = {
    <s:r#""([^"\\]|\\.)*""#> => s[1..s.len()-1].to_string(),
};

// Комма-сепаратор для списков
Comma<T>: Vec<T> = {
    <item: T> "," <rest: Comma<T>> => {
        let mut v = vec![item];
        v.extend(rest);
        v
    },
    <item: T> => vec![item],
    => vec![]
};

pub Array: Vec<Expr> = {
    "[" <items:Comma<Expr>> "]" => items,
};

pub Dictionary: Vec<(Expr, Expr)> = {
    "{" <entries:Comma<Entry>> "}" => entries,
};

Entry: (Expr, Expr) = {
    <key:StringLit> ":" <value:Expr> => (Expr::StringLit(key), value),
    <key:Ident> ":" <value:Expr> => (Expr::Ident(key), value)
};